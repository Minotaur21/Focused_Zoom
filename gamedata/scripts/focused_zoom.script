-- Focused Zoom MCM values
local holstered_fov_mcm = 1.0		-- used to calculate fov multiplier when holstered and focused
local aiming_hud_fov_mcm = 1.0		-- used to calculate hud_fov multiplier when aimed and focused
local aiming_fov_mcm = 1.0			-- used to calculate fov multiplier when aimed and focused

-- Focused Zoom Calculated values
local holstered_focus_fov = 70		-- fov value to be set when holstered and focused
local aiming_focus_hud_fov = 0.6	-- hud_fov value to be set when aimed and focused
local aiming_focus_fov = 70			-- fov value to be set when aimed and focused

-- Sneaky's Adjustable Scopes variables and fov config, values set by Adjustable Scopes MCM
local zoom_in_iron = 0.40
local zoom_in_scope = 0.35
local zoom_bad_scope = 0.2
local gl_fov = 0.45
ini_fov = ini_file_ex("items\\weapon_fov_values.ltx")

-- Values when weapon is aimed and Focused Zoom is not on
local default_aim_hud_fov = 0.35	-- hud_fov as set by Adjustable Scopes configs
local default_zoom_factor = 0		-- scope_zoom_factor as set by weapon configs

-- Game Setting values
local default_hud_fov = ui_options.get("video/basic/hud_fov")
local default_fov = ui_options.get("video/basic/fov")

-- Useful booleans
local is_mcm_open = false			-- self-explanatory, to check if variables need updating
local weapon_aimed = false			-- true means weapon is being aimed
local focused_zoom = false			-- true means holstered Focus Zoom is on
local scope_focused_zoom = false	-- true means aimed Focus Zoom is on

-- Useful debug messages similar to Raven's
function print_dbg( text , ...)
	if true then
		printf( "Zoom: | %s |  "..text ,time_global(), ...)
	end
end
-- print_dbg("What a pain this was")

function get_on_start()
	zoom_in_iron = scope_fov_mcm.get_config("iron_fov")
	zoom_in_scope = scope_fov_mcm.get_config("scope_fov")
	zoom_bad_scope = scope_fov_mcm.get_config("bad_scope_fov")
	gl_fov = scope_fov_mcm.get_config("grenade_fov")
	holstered_fov_mcm = focused_zoom_mcm.get_config("holstered_fov_mcm")
	aiming_hud_fov_mcm = focused_zoom_mcm.get_config("aiming_hud_fov_mcm")
	aiming_fov_mcm = focused_zoom_mcm.get_config("aiming_fov_mcm")
	default_fov = ui_options.get("video/basic/fov")
	default_hud_fov = ui_options.get("video/basic/hud_fov")
end

local function on_option_change()
	default_hud_fov = ui_options.get("video/basic/hud_fov")
	default_fov = ui_options.get("video/basic/fov")
	if is_mcm_open then
		zoom_in_iron = scope_fov_mcm.get_config("iron_fov")
		zoom_in_scope = scope_fov_mcm.get_config("scope_fov")
		zoom_bad_scope = scope_fov_mcm.get_config("bad_scope_fov")
		gl_fov = scope_fov_mcm.get_config("grenade_fov")
		holstered_fov_mcm = focused_zoom_mcm.get_config("holstered_fov_mcm")
		aiming_hud_fov_mcm = focused_zoom_mcm.get_config("aiming_hud_fov_mcm")
		aiming_fov_mcm = focused_zoom_mcm.get_config("aiming_fov_mcm")
	end
end

-- Returns scope_zoom_factor written in weapon configs
function get_zoom_factor()
	local weapon = db.actor:active_item()
	local scope_zoom_factor = 0
	if weapon then
		scope_zoom_factor = ini_sys:r_float_ex(weapon:section(),"scope_zoom_factor") or 0
	end
	return scope_zoom_factor
end

-- Returns default Adjustable Scopes hud_fov when aiming without Focused Zoom. Tweaked version of Sneaky's function
function get_aim_hud_fov()
	local weapon = db.actor:active_item()
	local scope = utils_item.get_attached_scope(weapon)
	local parent = ini_sys:r_string_ex(weapon:section(),"parent_section") or weapon:section()
	local not_pistol = not IsPistol(weapon)
	local two_dim = weapon and ini_sys:r_float_ex(weapon:section(),"scope_status") == 1
	local sec_exist = ini_fov:section_exist(parent)
	if weapon and weapon:weapon_in_grenade_mode() then
		return gl_fov
	end
	local iron_fov = ini_fov:r_float_ex(parent, "iron")
	if sec_exist and scope then
		local custom_fov = ini_fov:r_float_ex(parent, scope)
		if scope and custom_fov then
			return custom_fov
		end
	end
	if sec_exist and (not scope) and iron_fov then
		return iron_fov
	end
	if scope and not_pistol then
		local scope_bad = ini_fov:r_bool_ex("bad_scopes", scope)
		if scope_bad and (not two_dim) then
			return zoom_bad_scope
		else
			return zoom_in_scope
		end
	end
	if (not scope) or IsPistol(weapon) then
		return zoom_in_iron
	end
end

-- Turns off aimed Focused Zoom
function scope_focused_zoom_out()
	local weapon = db.actor:active_item()
	local two_dim = weapon and ini_sys:r_float_ex(weapon:section(),"scope_status") == 1
	if weapon then
		if two_dim then
			return
		else
			default_aim_hud_fov = get_aim_hud_fov()
			default_zoom_factor = get_zoom_factor()
			exec_console_cmd("hud_fov " .. default_aim_hud_fov)
			if not weapon_aimed then
				exec_console_cmd("fov " .. default_fov)
				scope_focused_zoom = false
				return
			elseif default_zoom_factor == 0 then
				exec_console_cmd("fov " .. default_fov)
			else
				exec_console_cmd("fov " .. default_zoom_factor * 0.75)
			end
		end
	end
	focused_zoom = false
	scope_focused_zoom = false
end

-- Turns on aimed Focused Zoom
function scope_focused_zoom_in()
	local weapon = db.actor:active_item()
	local two_dim = weapon and ini_sys:r_float_ex(weapon:section(),"scope_status") == 1
	if weapon then
		if two_dim then
			return
		else
			default_aim_hud_fov = get_aim_hud_fov()
			default_zoom_factor = get_zoom_factor()
			local focused_zoom_factor = (1.5 - aiming_fov_mcm) * default_zoom_factor
			aiming_focus_hud_fov = (aiming_hud_fov_mcm - 0.49) * default_aim_hud_fov
			if aiming_focus_hud_fov > 1.0 then aiming_focus_hud_fov = 1.0 end
			if aiming_focus_hud_fov < 0.1 then aiming_focus_hud_fov = 0.1 end
			exec_console_cmd("hud_fov " .. aiming_focus_hud_fov)
			if not weapon_aimed then
				exec_console_cmd("fov " .. default_fov)
				return
			elseif default_zoom_factor == 0 then
				aiming_focus_fov = (1.5 - aiming_fov_mcm) * default_fov
				if aiming_focus_fov > 180 then aiming_focus_fov = 180 end
				if aiming_focus_fov < 5 then aiming_focus_fov = 5 end
				exec_console_cmd("fov " .. aiming_focus_fov)
			else
				aiming_focus_fov = focused_zoom_factor * 0.75
				if aiming_focus_fov > 180 then aiming_focus_fov = 180 end
				if aiming_focus_fov < 5 then aiming_focus_fov = 5 end
				exec_console_cmd("fov " .. aiming_focus_fov)
			end
		end
	end
	scope_focused_zoom = true
end

-- Turns off holstered Focused Zoom
function focused_zoom_out()
	local weapon = db.actor:active_item()
	if not weapon then
		exec_console_cmd("hud_fov " .. default_hud_fov)
		exec_console_cmd("fov " .. default_fov)
	end
	focused_zoom = false
	scope_focused_zoom = false
end

-- Turns on holstered Focused Zoom
function focused_zoom_in()
	local weapon = db.actor:active_item()
	if not weapon then
		holstered_focus_fov = (1.5 - holstered_fov_mcm) * default_fov
		if holstered_focus_fov > 180 then holstered_focus_fov = 180 end
		if holstered_focus_fov < 5 then holstered_focus_fov = 5 end
		exec_console_cmd("fov " .. holstered_focus_fov)
	end
	focused_zoom = true
end

local function GUI_on_hide(namee)
	if namee == "UIMCM" then
		is_mcm_open = true
	end
end

local function GUI_on_show(name)
	if name == "UIMCM" then
		is_mcm_open = true
	end
end

function actor_on_weapon_zoom_out(wpn)
	weapon_aimed = false
	scope_focused_zoom_out()
end

function actor_on_weapon_zoom_in(wpn)
    weapon_aimed = true
	focused_zoom_out()
end

local function on_key_release(key)
	local bind = dik_to_bind(key)
	if (bind == key_bindings.kUSE) and weapon_aimed and scope_focused_zoom then
		scope_focused_zoom_out()
	end
	if (bind == key_bindings.kWPN_ZOOM) and not weapon_aimed and not scope_focused_zoom and focused_zoom then
		focused_zoom_out()
	end
end

local function on_key_press(key)
	local bind = dik_to_bind(key)
	if (bind == key_bindings.kUSE) and weapon_aimed and not scope_focused_zoom then
		scope_focused_zoom_in()
	end
	if (bind == key_bindings.kWPN_ZOOM) and not weapon_aimed and not scope_focused_zoom and not focused_zoom then
		focused_zoom_in()
	end
end

function on_game_start()
	RegisterScriptCallback("GUI_on_hide", GUI_on_hide)
	RegisterScriptCallback("GUI_on_show", GUI_on_show)
	RegisterScriptCallback("actor_on_weapon_zoom_in", actor_on_weapon_zoom_in)
	RegisterScriptCallback("actor_on_weapon_zoom_out", actor_on_weapon_zoom_out)
	RegisterScriptCallback("on_option_change", on_option_change)
    RegisterScriptCallback("on_key_press", on_key_press)
    RegisterScriptCallback("on_key_release", on_key_release)
end